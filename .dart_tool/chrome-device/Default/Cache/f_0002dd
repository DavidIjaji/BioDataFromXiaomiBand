define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/widgets/form.dart', 'packages/flutter/src/material/text_field.dart', 'packages/flutter/src/widgets/widget_span.dart'], (function load__packages__flutter__src__material__text_form_field_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__widgets__form$46dart, packages__flutter__src__material__text_field$46dart, packages__flutter__src__widgets__widget_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const input_decorator = packages__flutter__src__material__icon_button$46dart.src__material__input_decorator;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const form = packages__flutter__src__widgets__form$46dart.src__widgets__form;
  const text_field = packages__flutter__src__material__text_field$46dart.src__material__text_field;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const editable_text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__editable_text;
  var text_form_field = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    FormFieldStateOfString: () => (T.FormFieldStateOfString = dart.constFn(form.FormFieldState$(core.String)))(),
    FormFieldStateOfStringToTextField: () => (T.FormFieldStateOfStringToTextField = dart.constFn(dart.fnType(text_field.TextField, [T.FormFieldStateOfString()])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: input_decorator.InputDecoration.prototype,
        [InputDecoration_alignLabelWithHint]: null,
        [InputDecoration_semanticCounterText]: null,
        [InputDecoration_enabled]: true,
        [InputDecoration_border]: null,
        [InputDecoration_enabledBorder]: null,
        [InputDecoration_disabledBorder]: null,
        [InputDecoration_focusedErrorBorder]: null,
        [InputDecoration_focusedBorder]: null,
        [InputDecoration_errorBorder]: null,
        [InputDecoration_hoverColor]: null,
        [InputDecoration_focusColor]: null,
        [InputDecoration_fillColor]: null,
        [InputDecoration_filled]: null,
        [InputDecoration_counterStyle]: null,
        [InputDecoration_counter]: null,
        [InputDecoration_counterText]: null,
        [InputDecoration_suffixIconConstraints]: null,
        [InputDecoration_suffixStyle]: null,
        [InputDecoration_suffixText]: null,
        [InputDecoration_suffix]: null,
        [InputDecoration_suffixIcon]: null,
        [InputDecoration_prefixStyle]: null,
        [InputDecoration_prefixText]: null,
        [InputDecoration_prefix]: null,
        [InputDecoration_prefixIconConstraints]: null,
        [InputDecoration_prefixIcon]: null,
        [InputDecoration_isCollapsed]: false,
        [InputDecoration_contentPadding]: null,
        [InputDecoration_isDense]: null,
        [InputDecoration_floatingLabelBehavior]: null,
        [InputDecoration_hasFloatingPlaceholder]: true,
        [InputDecoration_errorMaxLines]: null,
        [InputDecoration_errorStyle]: null,
        [InputDecoration_errorText]: null,
        [InputDecoration_hintMaxLines]: null,
        [InputDecoration_hintTextDirection]: null,
        [InputDecoration_hintStyle]: null,
        [InputDecoration_hintText]: null,
        [InputDecoration_helperMaxLines]: null,
        [InputDecoration_helperStyle]: null,
        [InputDecoration_helperText]: null,
        [InputDecoration_labelStyle]: null,
        [InputDecoration_labelText]: null,
        [InputDecoration_icon]: null
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name]: "TextCapitalization.none",
        index: 3
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.start",
        index: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 12,
        [_Location_line]: 252,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 12,
        [_Location_line]: 253,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 12,
        [_Location_line]: 254,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardType",
        [_Location_column]: 12,
        [_Location_line]: 255,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textInputAction",
        [_Location_column]: 12,
        [_Location_line]: 256,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 12,
        [_Location_line]: 257,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "strutStyle",
        [_Location_column]: 12,
        [_Location_line]: 258,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 12,
        [_Location_line]: 259,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlignVertical",
        [_Location_column]: 12,
        [_Location_line]: 260,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 12,
        [_Location_line]: 261,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textCapitalization",
        [_Location_column]: 12,
        [_Location_line]: 262,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 12,
        [_Location_line]: 263,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "toolbarOptions",
        [_Location_column]: 12,
        [_Location_line]: 264,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "readOnly",
        [_Location_column]: 12,
        [_Location_line]: 265,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCursor",
        [_Location_column]: 12,
        [_Location_line]: 266,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "obscuringCharacter",
        [_Location_column]: 12,
        [_Location_line]: 267,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "obscureText",
        [_Location_column]: 12,
        [_Location_line]: 268,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autocorrect",
        [_Location_column]: 12,
        [_Location_line]: 269,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "smartDashesType",
        [_Location_column]: 12,
        [_Location_line]: 270,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "smartQuotesType",
        [_Location_column]: 12,
        [_Location_line]: 271,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableSuggestions",
        [_Location_column]: 12,
        [_Location_line]: 272,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLengthEnforced",
        [_Location_column]: 12,
        [_Location_line]: 273,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLengthEnforcement",
        [_Location_column]: 12,
        [_Location_line]: 274,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLines",
        [_Location_column]: 12,
        [_Location_line]: 275,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minLines",
        [_Location_column]: 12,
        [_Location_line]: 276,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "expands",
        [_Location_column]: 12,
        [_Location_line]: 277,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLength",
        [_Location_column]: 12,
        [_Location_line]: 278,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 12,
        [_Location_line]: 279,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 12,
        [_Location_line]: 280,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEditingComplete",
        [_Location_column]: 12,
        [_Location_line]: 281,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSubmitted",
        [_Location_column]: 12,
        [_Location_line]: 282,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inputFormatters",
        [_Location_column]: 12,
        [_Location_line]: 283,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 12,
        [_Location_line]: 284,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorWidth",
        [_Location_column]: 12,
        [_Location_line]: 285,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorHeight",
        [_Location_column]: 12,
        [_Location_line]: 286,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorRadius",
        [_Location_column]: 12,
        [_Location_line]: 287,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorColor",
        [_Location_column]: 12,
        [_Location_line]: 288,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollPadding",
        [_Location_column]: 12,
        [_Location_line]: 289,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollPhysics",
        [_Location_column]: 12,
        [_Location_line]: 290,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardAppearance",
        [_Location_column]: 12,
        [_Location_line]: 291,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableInteractiveSelection",
        [_Location_column]: 12,
        [_Location_line]: 292,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionControls",
        [_Location_column]: 12,
        [_Location_line]: 293,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "buildCounter",
        [_Location_column]: 12,
        [_Location_line]: 294,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofillHints",
        [_Location_column]: 12,
        [_Location_line]: 295,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollController",
        [_Location_column]: 12,
        [_Location_line]: 296,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50], widget_inspector._Location);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[5] || CT.C5,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 251,
        [_Location_file]: "file:///C:/Users/david/Documents/flutter/packages/flutter/lib/src/material/text_form_field.dart"
      });
    }
  }, false);
  var C = Array(51).fill(void 0);
  var I = [
    "file:///C:/Users/david/Documents/flutter/packages/flutter/lib/src/material/text_form_field.dart",
    "package:flutter/src/material/text_form_field.dart"
  ];
  var controller$ = dart.privateName(text_form_field, "TextFormField.controller");
  var InputDecoration_alignLabelWithHint = dart.privateName(input_decorator, "InputDecoration.alignLabelWithHint");
  var InputDecoration_semanticCounterText = dart.privateName(input_decorator, "InputDecoration.semanticCounterText");
  var InputDecoration_enabled = dart.privateName(input_decorator, "InputDecoration.enabled");
  var InputDecoration_border = dart.privateName(input_decorator, "InputDecoration.border");
  var InputDecoration_enabledBorder = dart.privateName(input_decorator, "InputDecoration.enabledBorder");
  var InputDecoration_disabledBorder = dart.privateName(input_decorator, "InputDecoration.disabledBorder");
  var InputDecoration_focusedErrorBorder = dart.privateName(input_decorator, "InputDecoration.focusedErrorBorder");
  var InputDecoration_focusedBorder = dart.privateName(input_decorator, "InputDecoration.focusedBorder");
  var InputDecoration_errorBorder = dart.privateName(input_decorator, "InputDecoration.errorBorder");
  var InputDecoration_hoverColor = dart.privateName(input_decorator, "InputDecoration.hoverColor");
  var InputDecoration_focusColor = dart.privateName(input_decorator, "InputDecoration.focusColor");
  var InputDecoration_fillColor = dart.privateName(input_decorator, "InputDecoration.fillColor");
  var InputDecoration_filled = dart.privateName(input_decorator, "InputDecoration.filled");
  var InputDecoration_counterStyle = dart.privateName(input_decorator, "InputDecoration.counterStyle");
  var InputDecoration_counter = dart.privateName(input_decorator, "InputDecoration.counter");
  var InputDecoration_counterText = dart.privateName(input_decorator, "InputDecoration.counterText");
  var InputDecoration_suffixIconConstraints = dart.privateName(input_decorator, "InputDecoration.suffixIconConstraints");
  var InputDecoration_suffixStyle = dart.privateName(input_decorator, "InputDecoration.suffixStyle");
  var InputDecoration_suffixText = dart.privateName(input_decorator, "InputDecoration.suffixText");
  var InputDecoration_suffix = dart.privateName(input_decorator, "InputDecoration.suffix");
  var InputDecoration_suffixIcon = dart.privateName(input_decorator, "InputDecoration.suffixIcon");
  var InputDecoration_prefixStyle = dart.privateName(input_decorator, "InputDecoration.prefixStyle");
  var InputDecoration_prefixText = dart.privateName(input_decorator, "InputDecoration.prefixText");
  var InputDecoration_prefix = dart.privateName(input_decorator, "InputDecoration.prefix");
  var InputDecoration_prefixIconConstraints = dart.privateName(input_decorator, "InputDecoration.prefixIconConstraints");
  var InputDecoration_prefixIcon = dart.privateName(input_decorator, "InputDecoration.prefixIcon");
  var InputDecoration_isCollapsed = dart.privateName(input_decorator, "InputDecoration.isCollapsed");
  var InputDecoration_contentPadding = dart.privateName(input_decorator, "InputDecoration.contentPadding");
  var InputDecoration_isDense = dart.privateName(input_decorator, "InputDecoration.isDense");
  var InputDecoration_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecoration.floatingLabelBehavior");
  var InputDecoration_hasFloatingPlaceholder = dart.privateName(input_decorator, "InputDecoration.hasFloatingPlaceholder");
  var InputDecoration_errorMaxLines = dart.privateName(input_decorator, "InputDecoration.errorMaxLines");
  var InputDecoration_errorStyle = dart.privateName(input_decorator, "InputDecoration.errorStyle");
  var InputDecoration_errorText = dart.privateName(input_decorator, "InputDecoration.errorText");
  var InputDecoration_hintMaxLines = dart.privateName(input_decorator, "InputDecoration.hintMaxLines");
  var InputDecoration_hintTextDirection = dart.privateName(input_decorator, "InputDecoration.hintTextDirection");
  var InputDecoration_hintStyle = dart.privateName(input_decorator, "InputDecoration.hintStyle");
  var InputDecoration_hintText = dart.privateName(input_decorator, "InputDecoration.hintText");
  var InputDecoration_helperMaxLines = dart.privateName(input_decorator, "InputDecoration.helperMaxLines");
  var InputDecoration_helperStyle = dart.privateName(input_decorator, "InputDecoration.helperStyle");
  var InputDecoration_helperText = dart.privateName(input_decorator, "InputDecoration.helperText");
  var InputDecoration_labelStyle = dart.privateName(input_decorator, "InputDecoration.labelStyle");
  var InputDecoration_labelText = dart.privateName(input_decorator, "InputDecoration.labelText");
  var InputDecoration_icon = dart.privateName(input_decorator, "InputDecoration.icon");
  var _name = dart.privateName(text_input, "_name");
  var _name$ = dart.privateName(ui, "_name");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _effectiveController = dart.privateName(text_form_field, "_effectiveController");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  text_form_field.TextFormField = class TextFormField extends form.FormField$(core.String) {
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    createState() {
      return new text_form_field._TextFormFieldState.new();
    }
  };
  (text_form_field.TextFormField.new = function(opts) {
    let t0, t1, t0$, t0$0, t0$1;
    let key = opts && 'key' in opts ? opts.key : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[0] || CT.C0;
    let keyboardType = opts && 'keyboardType' in opts ? opts.keyboardType : null;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[1] || CT.C1;
    let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[2] || CT.C2;
    let textAlignVertical = opts && 'textAlignVertical' in opts ? opts.textAlignVertical : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let toolbarOptions = opts && 'toolbarOptions' in opts ? opts.toolbarOptions : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    let autovalidate = opts && 'autovalidate' in opts ? opts.autovalidate : false;
    let maxLengthEnforced = opts && 'maxLengthEnforced' in opts ? opts.maxLengthEnforced : true;
    let maxLengthEnforcement = opts && 'maxLengthEnforcement' in opts ? opts.maxLengthEnforcement : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onEditingComplete = opts && 'onEditingComplete' in opts ? opts.onEditingComplete : null;
    let onFieldSubmitted = opts && 'onFieldSubmitted' in opts ? opts.onFieldSubmitted : null;
    let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
    let validator = opts && 'validator' in opts ? opts.validator : null;
    let inputFormatters = opts && 'inputFormatters' in opts ? opts.inputFormatters : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 2;
    let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
    let scrollPadding = opts && 'scrollPadding' in opts ? opts.scrollPadding : C[3] || CT.C3;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : true;
    let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
    let buildCounter = opts && 'buildCounter' in opts ? opts.buildCounter : null;
    let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let autovalidateMode = opts && 'autovalidateMode' in opts ? opts.autovalidateMode : null;
    let scrollController = opts && 'scrollController' in opts ? opts.scrollController : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$] = controller;
    if (!(initialValue == null || controller == null)) dart.assertFailed(null, I[0], 198, 15, "initialValue == null || controller == null");
    if (!(textAlign !== null)) dart.assertFailed(null, I[0], 199, 15, "textAlign != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[0], 200, 15, "autofocus != null");
    if (!(readOnly !== null)) dart.assertFailed(null, I[0], 201, 15, "readOnly != null");
    if (!(obscuringCharacter !== null && obscuringCharacter.length === 1)) dart.assertFailed(null, I[0], 202, 15, "obscuringCharacter != null && obscuringCharacter.length == 1");
    if (!(obscureText !== null)) dart.assertFailed(null, I[0], 203, 15, "obscureText != null");
    if (!(autocorrect !== null)) dart.assertFailed(null, I[0], 204, 15, "autocorrect != null");
    if (!(enableSuggestions !== null)) dart.assertFailed(null, I[0], 205, 15, "enableSuggestions != null");
    if (!(autovalidate !== null)) dart.assertFailed(null, I[0], 206, 15, "autovalidate != null");
    if (!(autovalidate === false || autovalidate === true && autovalidateMode == null)) dart.assertFailed("autovalidate and autovalidateMode should not be used together.", I[0], 208, 10, "autovalidate == false ||\r\n         autovalidate == true && autovalidateMode == null");
    if (!(maxLengthEnforced !== null)) dart.assertFailed(null, I[0], 212, 15, "maxLengthEnforced != null");
    if (!(maxLengthEnforced || maxLengthEnforcement == null)) dart.assertFailed("maxLengthEnforced is deprecated, use only maxLengthEnforcement", I[0], 214, 10, "maxLengthEnforced || maxLengthEnforcement == null");
    if (!(scrollPadding !== null)) dart.assertFailed(null, I[0], 217, 15, "scrollPadding != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[0], 218, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, I[0], 219, 15, "minLines == null || minLines > 0");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", I[0], 221, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands !== null)) dart.assertFailed(null, I[0], 224, 15, "expands != null");
    if (!(!expands || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", I[0], 226, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(!obscureText || maxLines === 1)) dart.assertFailed("Obscured fields cannot be multiline.", I[0], 229, 15, "!obscureText || maxLines == 1");
    if (!(maxLength == null || dart.notNull(maxLength) > 0)) dart.assertFailed(null, I[0], 230, 15, "maxLength == null || maxLength > 0");
    if (!(enableInteractiveSelection !== null)) dart.assertFailed(null, I[0], 231, 15, "enableInteractiveSelection != null");
    text_form_field.TextFormField.__proto__.new.call(this, {key: key, initialValue: controller != null ? controller.text : (t0 = initialValue, t0 == null ? "" : t0), onSaved: onSaved, validator: validator, enabled: (t0$0 = (t0$ = enabled, t0$ == null ? (t1 = decoration, t1 == null ? null : t1.enabled) : t0$), t0$0 == null ? true : t0$0), autovalidateMode: autovalidate ? form.AutovalidateMode.always : (t0$1 = autovalidateMode, t0$1 == null ? form.AutovalidateMode.disabled : t0$1), builder: dart.fn(field => {
        let t0, t0$, t0$0, t1, t0$1, t0$2;
        let state = text_form_field._TextFormFieldState.as(field);
        let effectiveDecoration = (t0 = decoration, t0 == null ? C[0] || CT.C0 : t0).applyDefaults(theme.Theme.of(field.context).inputDecorationTheme);
        function onChangedHandler(value) {
          field.didChange(value);
          if (onChanged != null) {
            onChanged(value);
          }
        }
        dart.fn(onChangedHandler, T.StringTovoid());
        return new text_field.TextField.new({controller: state[_effectiveController], focusNode: focusNode, decoration: effectiveDecoration.copyWith({errorText: field.errorText}), keyboardType: keyboardType, textInputAction: textInputAction, style: style, strutStyle: strutStyle, textAlign: textAlign, textAlignVertical: textAlignVertical, textDirection: textDirection, textCapitalization: textCapitalization, autofocus: autofocus, toolbarOptions: toolbarOptions, readOnly: readOnly, showCursor: showCursor, obscuringCharacter: obscuringCharacter, obscureText: obscureText, autocorrect: autocorrect, smartDashesType: (t0$ = smartDashesType, t0$ == null ? obscureText ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0$), smartQuotesType: (t0$0 = smartQuotesType, t0$0 == null ? obscureText ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$0), enableSuggestions: enableSuggestions, maxLengthEnforced: maxLengthEnforced, maxLengthEnforcement: maxLengthEnforcement, maxLines: maxLines, minLines: minLines, expands: expands, maxLength: maxLength, onChanged: onChangedHandler, onTap: onTap, onEditingComplete: onEditingComplete, onSubmitted: onFieldSubmitted, inputFormatters: inputFormatters, enabled: (t0$2 = (t0$1 = enabled, t0$1 == null ? (t1 = decoration, t1 == null ? null : t1.enabled) : t0$1), t0$2 == null ? true : t0$2), cursorWidth: cursorWidth, cursorHeight: cursorHeight, cursorRadius: cursorRadius, cursorColor: cursorColor, scrollPadding: scrollPadding, scrollPhysics: scrollPhysics, keyboardAppearance: keyboardAppearance, enableInteractiveSelection: enableInteractiveSelection, selectionControls: selectionControls, buildCounter: buildCounter, autofillHints: autofillHints, scrollController: scrollController, $creationLocationd_0dea112b090073317d4: C[4] || CT.C4});
      }, T.FormFieldStateOfStringToTextField()), $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text_form_field.TextFormField.prototype;
  dart.addTypeTests(text_form_field.TextFormField);
  dart.addTypeCaches(text_form_field.TextFormField);
  dart.setMethodSignature(text_form_field.TextFormField, () => ({
    __proto__: dart.getMethods(text_form_field.TextFormField.__proto__),
    createState: dart.fnType(text_form_field._TextFormFieldState, [])
  }));
  dart.setLibraryUri(text_form_field.TextFormField, I[1]);
  dart.setFieldSignature(text_form_field.TextFormField, () => ({
    __proto__: dart.getFields(text_form_field.TextFormField.__proto__),
    controller: dart.finalFieldType(dart.nullable(editable_text.TextEditingController))
  }));
  var _controller = dart.privateName(text_form_field, "_controller");
  var _handleControllerChanged = dart.privateName(text_form_field, "_handleControllerChanged");
  text_form_field._TextFormFieldState = class _TextFormFieldState extends form.FormFieldState$(core.String) {
    get [_effectiveController]() {
      let t0;
      t0 = this.widget.controller;
      return t0 == null ? this[_controller] : t0;
    }
    get widget() {
      return text_form_field.TextFormField.as(super.widget);
    }
    initState() {
      super.initState();
      if (this.widget.controller == null) {
        this[_controller] = new editable_text.TextEditingController.new({text: this.widget.initialValue});
      } else {
        dart.nullCheck(this.widget.controller).addListener(dart.bind(this, _handleControllerChanged));
      }
    }
    didUpdateWidget(oldWidget) {
      let t0, t0$;
      text_form_field.TextFormField.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.controller, oldWidget.controller)) {
        t0 = oldWidget.controller;
        t0 == null ? null : t0.removeListener(dart.bind(this, _handleControllerChanged));
        t0$ = this.widget.controller;
        t0$ == null ? null : t0$.addListener(dart.bind(this, _handleControllerChanged));
        if (oldWidget.controller != null && this.widget.controller == null) this[_controller] = new editable_text.TextEditingController.fromValue(dart.nullCheck(oldWidget.controller).value);
        if (this.widget.controller != null) {
          this.setValue(dart.nullCheck(this.widget.controller).text);
          if (oldWidget.controller == null) this[_controller] = null;
        }
      }
    }
    dispose() {
      let t0;
      t0 = this.widget.controller;
      t0 == null ? null : t0.removeListener(dart.bind(this, _handleControllerChanged));
      super.dispose();
    }
    didChange(value) {
      let t0;
      T.StringN().as(value);
      super.didChange(value);
      if (dart.nullCheck(this[_effectiveController]).text !== value) dart.nullCheck(this[_effectiveController]).text = (t0 = value, t0 == null ? "" : t0);
    }
    reset() {
      let t0;
      dart.nullCheck(this[_effectiveController]).text = (t0 = this.widget.initialValue, t0 == null ? "" : t0);
      super.reset();
    }
    [_handleControllerChanged]() {
      if (dart.nullCheck(this[_effectiveController]).text !== this.value) this.didChange(dart.nullCheck(this[_effectiveController]).text);
    }
  };
  (text_form_field._TextFormFieldState.new = function() {
    this[_controller] = null;
    text_form_field._TextFormFieldState.__proto__.new.call(this);
    ;
  }).prototype = text_form_field._TextFormFieldState.prototype;
  dart.addTypeTests(text_form_field._TextFormFieldState);
  dart.addTypeCaches(text_form_field._TextFormFieldState);
  dart.setMethodSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getMethods(text_form_field._TextFormFieldState.__proto__),
    [_handleControllerChanged]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getGetters(text_form_field._TextFormFieldState.__proto__),
    [_effectiveController]: dart.nullable(editable_text.TextEditingController),
    widget: text_form_field.TextFormField
  }));
  dart.setLibraryUri(text_form_field._TextFormFieldState, I[1]);
  dart.setFieldSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getFields(text_form_field._TextFormFieldState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(editable_text.TextEditingController))
  }));
  dart.trackLibraries("packages/flutter/src/material/text_form_field.dart", {
    "package:flutter/src/material/text_form_field.dart": text_form_field
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_form_field.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter/src/material/text_form_field.dart.lib.js"}');
  // Exports:
  return {
    src__material__text_form_field: text_form_field
  };
}));

//# sourceMappingURL=text_form_field.dart.lib.js.map
